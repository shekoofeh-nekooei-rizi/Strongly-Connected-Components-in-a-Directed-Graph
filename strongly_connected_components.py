# -*- coding: utf-8 -*-
"""Strongly_Connected_Components.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gKPbwsIdQ2xAPOWLp_x66MJuRhsbQhkE

**Author: Shekoofeh Nekooei Rizi**

This program computes Strongly Connected Components (SCCs) of a given directed graph.


I implemented Kosaraju's algorithm for this purpose.

My implementation is simple and [pretty] efficient in terms of both time and memory usage.

It runs fast!


Input file specifies the edges of the directed graph. Every row in the file indicates a directed edge.

Vertices are represented by positive integers starting from 1.

The output file displays the number of components and lists the vertices belonging to each SCC in seperate lines.
"""

def Strongly_Connected_Components(number_of_vertices, list_of_edges):
  graph_original = {ver:[] for ver in range(number_of_vertices)}
  graph_reverse  = {ver:[] for ver in range(number_of_vertices)}
  for e in list_of_edges:
    graph_original[e[0]-1].append(e[1]-1)
    graph_reverse[e[1]-1].append(e[0]-1)

  visited = set()
  clock = 0
  finish_time = [0] * number_of_vertices
  current_component = []


  def dfs(node, graph):
    nonlocal clock, current_component
    clock += 1
    visited.add(node)
    current_component.append(node+1)
    for neighbor in graph[node]:
      if neighbor not in visited:
        dfs(neighbor, graph)
    clock += 1
    finish_time[node] = clock


  for vertex in range(number_of_vertices):
    if vertex not in visited:
      dfs(vertex, graph_original)

  order_after_first_dfs = sorted(range(number_of_vertices), key=lambda v: finish_time[v], reverse = True)
  visited = set()
  strongly_connected_components = []

  for vertex in order_after_first_dfs:
    if vertex not in visited:
      current_component = []
      dfs(vertex, graph_reverse)
      strongly_connected_components.append(current_component)

  return strongly_connected_components

def read_input_file(file_name):
  n_of_vertices = 0
  list_of_edges = []
  with open(file_name, 'r') as file:
    for line in file:
      u, v = map(int, line.split())
      list_of_edges.append([u,v])
      n_of_vertices = max(n_of_vertices, u, v)
  return n_of_vertices, list_of_edges

def write_output_file(result, output_file_name):
  with open(output_file_name, 'w') as file:
    file.write(f"There are {len(result)} strongly connected components in this graph.\n\n")
    result = sorted(result, key=len, reverse=True)
    for scc in result:
      file.write(str(scc) + "\n")

n, edges = read_input_file("input_file.txt")
s_c_c = Strongly_Connected_Components(n, edges)
write_output_file(s_c_c, "output_file.txt")

#import sys
#sys.setrecursionlimit(10**6)
